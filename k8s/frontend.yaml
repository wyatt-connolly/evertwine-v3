apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: evertwine
  labels:
    app: frontend
    tier: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      containers:
        - name: frontend
          image: evertwine/frontend:latest # Replace with your actual image
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
          env:
            # Configuration from ConfigMap
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: evertwine-config
                  key: NODE_ENV
            - name: NEXT_PUBLIC_API_URL
              valueFrom:
                configMapKeyRef:
                  name: evertwine-config
                  key: NEXT_PUBLIC_API_URL
            - name: NEXT_PUBLIC_APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: evertwine-config
                  key: NEXT_PUBLIC_APP_NAME
            - name: NEXT_PUBLIC_APP_VERSION
              valueFrom:
                configMapKeyRef:
                  name: evertwine-config
                  key: NEXT_PUBLIC_APP_VERSION
            # Static configuration
            - name: PORT
              value: "3000"
            - name: HOSTNAME
              value: "0.0.0.0"
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: evertwine
  labels:
    app: frontend
    tier: frontend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: evertwine
  labels:
    app: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
